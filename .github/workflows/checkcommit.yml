name: Build and test wheels with the latest python version (v3.13)

on: [push, pull_request]

jobs:
  build_and_test:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, ubuntu-24.04, ubuntu-latest, macos-13, macos-14]

    steps:
      - name: Check out image-io
        uses: actions/checkout@v4
        with:
         lfs: 'true'

      - if: matrix.os == 'windows-2022'
        name: Install Msys2 mingw64 for g++ and gcc tools on windows
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          location: D:\
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-nasm mingw-w64-x86_64-ninja

      - if: matrix.os == 'windows-2022'
        name: Install cibuildwheel for Windows
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel pytest numpy
          python -m pip install cibuildwheel==2.21.3

      - if: matrix.os == 'windows-2022'
        name: Build wheels for Windows
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_ARCHS: AMD64
          CIBW_ENVIRONMENT_WINDOWS: >
            PATH="D:\\msys64\\mingw64\\bin;D:\\msys64\\mingw64;$PATH"
          CIBW_BEFORE_BUILD: >
            rm -rf C:\\hostedtoolcache\\windows\\Python\\3.9.13\\x64\\python3.exe &&
            rm -rf C:\\hostedtoolcache\\windows\\Python\\3.9.13\\x64\\libs\\python39.lib
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: >
            cd /d D:\a\image-io\image-io &&
            pytest -s
          CIBW_BUILD: cp313-*
          CIBW_SKIP: pp* cp36-* cp37-* cp38-* cp39-* *musllinux*
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel} --only-plat"
          CIBW_BUILD_VERBOSITY: 1


      - if: matrix.os == 'ubuntu-24.04'
        name: Upload the source code to artifact for using later
        uses: actions/upload-artifact@v4
        with:
          name: git-repo
          path: ./*

      - if: matrix.os == 'ubuntu-latest'
        name: Set up QEMU for arm linux simulation
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - if: matrix.os == 'ubuntu-24.04' || matrix.os == 'ubuntu-latest'
        name: Install cibuildwheel for Linux
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install setuptools wheel pytest numpy
          python3 -m pip install cibuildwheel==2.21.3

      - if: matrix.os == 'ubuntu-24.04'
        name: Build wheels for x86_64 Linux
        run: python3 -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL: >
            yum install -y nasm
          CIBW_BEFORE_BUILD: >
            rm -rf /usr/local/bin/python3*
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: >
            cd /project &&
            pytest -s
          CIBW_BUILD: cp313-*
          CIBW_SKIP: pp* cp36-* cp37-* cp38-* cp39-* *musllinux*
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel} --only-plat"
          CIBW_BUILD_VERBOSITY: 1

      - if: matrix.os == 'ubuntu-latest'
        name: Build wheels for arm Linux
        run: python3 -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          CIBW_ARCHS_LINUX: aarch64
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_BEFORE_ALL: >
            yum install -y nasm
          CIBW_BEFORE_BUILD: >
            rm -rf /usr/local/bin/python3*
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: >
            cd /project &&
            pytest -s
          CIBW_BUILD: cp313-*
          CIBW_SKIP: pp* cp36-* cp37-* cp38-* cp39-* *musllinux*
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: "auditwheel repair -w {dest_dir} {wheel} --only-plat"
          CIBW_BUILD_VERBOSITY: 1

      - if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        name: Remove firstly the installed libs from MacOS
        run : |
          brew install nasm
          sudo rm -rf /Library/Frameworks/Mono.framework
          brew uninstall --ignore-dependencies jpeg-turbo libpng libtiff

      - if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        name: Install cibuildwheel for MacOS
        run: |
          python3 -m pip install --upgrade pip --break-system-packages
          python3 -m pip install setuptools wheel pytest numpy --break-system-packages
          python3 -m pip install cibuildwheel==2.21.3 --break-system-packages

      - if: matrix.os == 'macos-13' || matrix.os == 'macos-14'
        name: Build wheels for MacOS
        run: python3 -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
          MACOSX_DEPLOYMENT_TARGET: 11.0
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: >
            cd ${{github.workspace}} &&
            pytest -s
          CIBW_BUILD: cp313-*
          CIBW_SKIP: pp* cp36-* cp37-* cp38-* cp39-*
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cxx-image-io code
        uses: actions/checkout@v4

      - name: Build sdist
        run: python3 setup.py sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz